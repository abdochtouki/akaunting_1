name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y zip unzip libzip-dev
          composer install --optimize-autoloader --no-dev

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Install dependencies
        run: composer install

      - name: Run tests
        run: ./vendor/bin/phpunit --configuration phpunit.xml

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/akaunting:latest

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
  
      - name: Add Server to Known Hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
  
      - name: Deploy to Server
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/akaunting:latest
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USERNAME }}
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "
          docker pull $DOCKER_IMAGE &&
          docker stop akaunting-app || true &&
          docker rm akaunting-app || true &&
          docker run -d --name akaunting-app -p 8082:80 $DOCKER_IMAGE
          "

  
    
  
